{"version":3,"sources":["App/globalStyles.tsx","hooks/index.ts","common/components/AnalogClock/AnalogClock.tsx","common/components/DigitalClock/DigitalNumberDisplay.tsx","common/components/DigitalClock/DigitalClock.tsx","App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","useTickerInSeconds","interval","useState","Date","date","setDate","useEffect","timeout","start","document","timeline","currentTime","frame","time","elapsed","targetNext","Math","round","setTimeout","requestAnimationFrame","performance","now","clearTimeout","timeToRotation","t","chunks","ClockWrapper","styled","div","ClockSvg","svg","AnalogClock","console","log","hours","getHours","minutes","getMinutes","seconds","getSeconds","lines","Array","map","_","i","size","className","classnames","hour","x1","y1","x2","y2","style","transform","cx","cy","r","Screen","Strip","Item","DigitalNumberDisplay","value","padding","animated","items","useMemo","current","toString","padStart","DigitalClock","MainWrapper","main","ClockItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","history","createBrowserHistory","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2066a266.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --primary-color: #222;\n    --secondary-color: #ccc;\n  }\n  \n  \n  *, *::before, *::after {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n  }\n  \n  html, body {\n    height: 100%;\n  }\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    \n    background: var(--primary-color);\n    color: var(--secondary-color);\n    \n    display: flex;\n    flex-direction: column;\n    \n    #root {\n      flex: 1;\n    }\n  }\n`;\n","import { useCallback, useEffect, useLayoutEffect, useState } from 'react';\n\ninterface WindowSize {\n  width: number;\n  height: number;\n}\n\nexport const useWindowSize = () => {\n  const [size, setSize] = useState<WindowSize>({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  const onResize = useCallback(() => {\n    setSize({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [onResize]);\n\n  return size;\n};\n\nexport const useTickerInSeconds = (interval: number) => {\n  const [date, setDate] = useState<Date>(new Date());\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    const start = document.timeline.currentTime ?? 0;\n    const frame = (time: number) => {\n      const elapsed = time - start;\n      const seconds = Math.round(elapsed / 1000);\n      const targetNext = (seconds + interval) * 1000 + start;\n\n      setDate(new Date());\n\n      timeout = setTimeout(\n        () => requestAnimationFrame(frame),\n        targetNext - performance.now()\n      );\n    };\n\n    frame(start);\n\n    return () => clearTimeout(timeout);\n  }, [interval]);\n\n  return { date };\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { useTickerInSeconds } from '../../../hooks';\n\nconst timeToRotation = (t: number, chunks: number) => {\n  return (360 / chunks) * t;\n};\n\nconst ClockWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n\n  min-width: 160px;\n`;\n\nconst ClockSvg = styled.svg`\n  width: 100%;\n  height: 100%;\n  display: block;\n\n  .clock-base {\n    fill: #f2f2f2;\n  }\n\n  .clock-marking {\n    stroke: #222;\n    transform-origin: center center;\n    opacity: 0.5;\n\n    &.hour {\n      opacity: 1;\n    }\n  }\n\n  .clock-pivot {\n    fill: #ff4433;\n  }\n\n  .clock-needle {\n    stroke: #222;\n    stroke-width: 2px;\n    transform-origin: center center;\n\n    &.clock-seconds {\n      stroke: #ff4433;\n      stroke-width: 1px;\n    }\n  }\n`;\n\nexport const AnalogClock: React.FC = () => {\n  const { date } = useTickerInSeconds(1);\n\n  console.log({\n    hours: date.getHours(),\n    minutes: date.getMinutes(),\n    seconds: date.getSeconds(),\n  });\n\n  const lines = [...new Array(60)].map((_, i) => {\n    let size = 3;\n\n    if (i % 5 === 0) {\n      size = 8;\n    }\n\n    return (\n      <line\n        key={i}\n        className={classnames('clock-marking', {\n          hour: i % 5 === 0,\n        })}\n        x1=\"50%\"\n        y1={`${size}%`}\n        x2=\"50%\"\n        y2=\"0\"\n        style={{ transform: `rotateZ(${(360 / 60) * i}deg)` }}\n      />\n    );\n  });\n\n  return (\n    <ClockWrapper>\n      <ClockSvg>\n        <circle className=\"clock-base\" cx=\"50%\" cy=\"50%\" r=\"50%\" />\n        {lines}\n\n        <line\n          className=\"clock-needle clock-hours\"\n          x1=\"50%\"\n          y1=\"16%\"\n          x2=\"50%\"\n          y2=\"50%\"\n          style={{\n            transform: `rotateZ(${timeToRotation(date.getHours() * 5, 60)}deg)`,\n          }}\n        />\n\n        <line\n          className=\"clock-needle clock-minutes\"\n          x1=\"50%\"\n          y1=\"8%\"\n          x2=\"50%\"\n          y2=\"50%\"\n          style={{\n            transform: `rotateZ(${timeToRotation(date.getMinutes(), 60)}deg)`,\n          }}\n        />\n\n        <line\n          className=\"clock-needle clock-seconds\"\n          x1=\"50%\"\n          y1=\"3%\"\n          x2=\"50%\"\n          y2=\"50%\"\n          style={{\n            transform: `rotateZ(${timeToRotation(date.getSeconds(), 60)}deg)`,\n          }}\n        />\n        <circle className=\"clock-pivot\" cx=\"50%\" cy=\"50%\" r=\"6px\" />\n      </ClockSvg>\n    </ClockWrapper>\n  );\n};\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nconst Screen = styled.div`\n  --height: 1.25em;\n  --width: 1.5em;\n\n  font-size: 64px;\n  font-weight: lighter;\n  color: white;\n  display: block;\n  position: relative;\n  width: var(--width);\n  height: var(--height);\n  margin-right: 0.25em;\n\n  &::after {\n    content: ':';\n    display: block;\n    position: absolute;\n    color: #fff;\n    right: -0.25em;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n\n  &:last-child {\n    margin-right: 0;\n\n    &::after {\n      display: none;\n    }\n  }\n`;\n\nconst Strip = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  &.animated {\n    transition: all 600ms ease;\n  }\n`;\n\nconst Item = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 100%;\n  height: var(--height);\n\n  &:not(.current) {\n    opacity: 0.2;\n  }\n\n  &.animated {\n    transition: all 600ms ease;\n  }\n`;\n\ninterface IDigitalNumberDisplayProps {\n  size: number;\n  value: number;\n  padding: number;\n  animated: boolean;\n}\n\nexport const DigitalNumberDisplay: React.FC<IDigitalNumberDisplayProps> = ({\n  size,\n  value,\n  padding,\n  animated,\n}) => {\n  const items = useMemo(\n    () =>\n      [...new Array(size)].map((_, i) => {\n        return (\n          <Item\n            key={i}\n            className={classnames({ current: i === value, animated })}\n          >\n            {i.toString().padStart(padding, '0')}\n          </Item>\n        );\n      }),\n    [animated, padding, size, value]\n  );\n\n  return (\n    <Screen>\n      <Strip\n        className={classnames({ animated })}\n        style={{ transform: `translate3d(0,${1.25 * value * -1}em,0)` }}\n      >\n        {items}\n      </Strip>\n    </Screen>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTickerInSeconds } from '../../../hooks';\nimport { DigitalNumberDisplay } from './DigitalNumberDisplay';\n\nconst ClockWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  position: relative;\n\n  &::before,\n  &::after {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 25%;\n    z-index: 1;\n    background: linear-gradient(to bottom, #222 0%, rgba(34, 34, 34, 0) 100%);\n  }\n\n  &::after {\n    top: initial;\n    bottom: 0;\n    background: linear-gradient(to bottom, rgba(34, 34, 34, 0) 0%, #222 100%);\n  }\n`;\n\nexport const DigitalClock: React.FC = () => {\n  const { date } = useTickerInSeconds(1);\n\n  return (\n    <ClockWrapper>\n      <DigitalNumberDisplay\n        size={24}\n        value={date.getHours()}\n        padding={2}\n        animated\n      />\n      <DigitalNumberDisplay\n        size={60}\n        value={date.getMinutes()}\n        padding={2}\n        animated\n      />\n      <DigitalNumberDisplay\n        size={60}\n        value={date.getSeconds()}\n        padding={2}\n        animated\n      />\n    </ClockWrapper>\n  );\n};\n","import React, { Fragment } from 'react';\nimport { GlobalStyle } from './globalStyles';\nimport styled from 'styled-components';\nimport { AnalogClock } from '../common/components/AnalogClock/AnalogClock';\nimport { DigitalClock } from '../common/components/DigitalClock/DigitalClock';\n\nconst MainWrapper = styled.main`\n  display: flex;\n  gap: 1em;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  height: 100%;\n  background: var(--primary-color);\n  color: var(--secondary-color);\n`;\n\nconst ClockItem = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 1em;\n\n  &.analog {\n    aspect-ratio: 1 / 1;\n    max-width: 80vw;\n    @supports not (aspect-ratio: 1 / 1) {\n      width: min(320px, 80vw);\n      height: min(320px, 80vw);\n    }\n  }\n\n  &.digital {\n    height: 12em;\n  }\n`;\n\nconst App: React.FC = () => {\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <MainWrapper>\n        <ClockItem className=\"analog\">\n          <AnalogClock />\n        </ClockItem>\n        <ClockItem className=\"digital\">\n          <DigitalClock />\n        </ClockItem>\n      </MainWrapper>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}